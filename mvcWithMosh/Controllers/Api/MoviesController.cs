using AutoMapper;
using mvcWithMosh.DTOs;
using mvcWithMosh.Models;
using System;
using System.Data.Entity;
using System.Linq;
using System.Web.Http;

namespace mvcWithMosh.Controllers.Api
{
    public class MoviesController : ApiController
    {
        private readonly AppDbContext _dbContext;

        public MoviesController()
        {
            _dbContext = new AppDbContext();
        }


        // GET: api/Movies
        [HttpGet]
        public IHttpActionResult GetMovies()
        {
            return Ok(_dbContext.Movies
                .Include(m => m.Genre)
                .ToList()
                .Select(Mapper.Map<Movies, MoviesDTO>));
        }

        // GET: api/Movies/5
        [HttpGet]
        public IHttpActionResult GetMovie(int id)
        {
            var movie = _dbContext.Movies.Find(id);
            if (movie == null)
                return NotFound();

            return Ok(Mapper.Map<Movies, MoviesDTO>(movie));
        }

        // POST: api/Movies
        [HttpPost]
        public IHttpActionResult AddMovie(MoviesDTO movieDto)
        {
            if (!ModelState.IsValid)
                return BadRequest("Movies model is not valid");

            var movie = Mapper.Map<MoviesDTO, Movies>(movieDto);
            _dbContext.Movies.Add(movie);
            _dbContext.SaveChanges();

            movieDto.Id = movie.Id; //assign it the id generated by database as primary key,
            return Created(new Uri($"{Request.RequestUri}/{movieDto.Id}"),movieDto);
        }

        // PUT: api/Movies/5
        [HttpPut]
        public IHttpActionResult UpdateMovie(int id, MoviesDTO movieDTO)
        {
            if (!ModelState.IsValid)
                return BadRequest("Movies model is not valid");

            var movie = _dbContext.Movies.Find(id);
            if (movie == null)
                return NotFound();

            Mapper.Map(movieDTO, movie);
            _dbContext.SaveChanges();

            return Ok("success");
        }

        // DELETE: api/Movies/5
        [HttpDelete]
        public IHttpActionResult Delete(int id)
        {
            var movie = _dbContext.Movies.Find(id);
            if (movie == null)
                return NotFound();

            _dbContext.Movies.Remove(movie);
            _dbContext.SaveChanges();

            return Ok("success.");
        }
    }
}
